{"version":3,"sources":["serviceWorker.ts","router/routes.tsx","router/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","UserLayout","React","lazy","BasicLayout","path","component","children","redirect","RouterWrap","history","his","hashHistory","fallback","routes","map","item","index","Component","key","render","routeProps","__child__","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCjBAC,EAAaC,IAAMC,MAAK,kBAAM,iCAC9BC,EAAcF,IAAMC,MAAK,kBAAM,iCAGtB,GACX,CACIE,KAAM,QACNC,UAAWL,EACXM,SAAU,CACN,CACIF,KAAM,SACNC,UATFJ,IAAMC,MAAK,kBAAM,wDAenB,CACIE,KAAM,IACNG,SAAU,iBAItB,CACIH,KAAM,IACNC,UAAWF,EACXG,SAAU,KCSHE,EAzBI,SAACC,GAChB,IAAIC,EAAW,CAAEC,YAAa,IAG9B,OAFIF,IACAC,EAAIC,YAAcF,GAElB,kBAAC,IAAeC,EACZ,kBAAC,WAAD,CAAUE,SAAU,yCAChB,kBAAC,IAAD,KAEQC,EAAOC,KAAI,SAACC,EAAkBC,GAC1B,IAAMC,EAAYF,EAAKV,UACvB,OAAKY,EACE,kBAAC,IAAD,CAAOC,IAAKF,EAAOZ,KAAMW,EAAKX,KACjCe,OAAQ,SAAAC,GAAU,OAAI,kBAACH,EAAD,eAAWI,UAAWN,EAAKT,UAAcc,OAF5C,U,YCfnDE,IAASH,OACP,kBAAC,IAAMI,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SHgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.62069651.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nconst UserLayout = React.lazy(() => import('@/layouts/UserLayout'))\nconst BasicLayout = React.lazy(() => import('@/layouts/BasicLayout'))\nconst Login = React.lazy(() => import('@/pages/Login'))\n\nexport default [\n    {\n        path: '/user',\n        component: UserLayout,\n        children: [\n            {\n                path: '/login',\n                component: Login\n            },\n            // {\n            //     path: '/register',\n            //     component: Register\n            // },\n            {\n                path: '/',\n                redirect: '/user/login'\n            }\n        ]\n    },\n    {\n        path: '/',\n        component: BasicLayout,\n        children: []\n    }\n]","import React, { Suspense } from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport routes from './routes'\n\nexport interface RouterItem {\n    path?: string,\n    component?: React.LazyExoticComponent<any>,\n    children?: Array<Object>\n\n}\n\nconst RouterWrap = (history: any) => {\n    let his: any = { hashHistory: {} }\n    if (history)\n        his.hashHistory = history\n    return (\n        <HashRouter {...his}>\n            <Suspense fallback={<div>loading</div>}>\n                <Switch>\n                    {\n                        routes.map((item: RouterItem, index) => {\n                            const Component = item.component\n                            if (!Component) return ''\n                            return <Route key={index} path={item.path}\n                                render={routeProps => <Component __child__={item.children} {...routeProps}></Component>}\n                            ></Route>\n                        })\n                    }\n                    {/* <Redirect to='/user/login' /> */}\n                </Switch>\n            </Suspense>\n\n        </HashRouter >\n    )\n}\n\nexport default RouterWrap\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport RouterWrap from './router'\nimport 'antd/dist/antd.css';\nimport './global.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <RouterWrap />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}